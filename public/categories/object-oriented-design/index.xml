<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Object Oriented Design on Sohan&#39;s Blog</title>
    <link>http://smsohan.com/categories/object-oriented-design/</link>
    <description>Recent content in Object Oriented Design on Sohan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Jan 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://smsohan.com/categories/object-oriented-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Object Versioning is an Open Design Problem</title>
      <link>http://smsohan.com/blog/2012/01/17/object-versioning-is-open-design/</link>
      <pubDate>Tue, 17 Jan 2012 00:00:00 +0000</pubDate>
      <guid>http://smsohan.com/blog/2012/01/17/object-versioning-is-open-design/</guid>
      <description>This unsolvable maze is a local food from Bangladesh, known as Jilapi&#xA;Photo credits to&amp;nbsp;udvranto pothikObject Versioning is often required by a business rule, for example, to maintain an audit trail or to be able to revert to a previous version, etc. This is the 3rd time in my career where this Object Versioning requirement made me think like -&#xA;There&#39;s gotta be an easier solution!&amp;nbsp;But, I am yet to find one.</description>
    </item>
    <item>
      <title>Using instanceof is mostly a Code Smell</title>
      <link>http://smsohan.com/blog/2011/11/01/using-instanceof-is-mostly-code-smell/</link>
      <pubDate>Tue, 01 Nov 2011 00:00:00 +0000</pubDate>
      <guid>http://smsohan.com/blog/2011/11/01/using-instanceof-is-mostly-code-smell/</guid>
      <description>When using static programming languages such as Java, often time I have seen people writing methods that accept Object as a parameter. These methods typically don&#39;t really work on any Object, but works with multiple types of classes that don&#39;t have any common base class. Here&#39;s an example of such a method:&#xA;As you can see in this example, the process method actually expects one of CleanFloor or LaunchRocket instances.</description>
    </item>
    <item>
      <title>Excess of Private Methods is a Code Smell</title>
      <link>http://smsohan.com/blog/2011/09/20/code-smell-private-vs-public-method/</link>
      <pubDate>Tue, 20 Sep 2011 00:00:00 +0000</pubDate>
      <guid>http://smsohan.com/blog/2011/09/20/code-smell-private-vs-public-method/</guid>
      <description>Private methods, when used meaningfully, are a great tool for writing beautiful object oriented code. But as many other things in life, excess of private methods is bad, too!&#xA;In my opinion, we use private methods to:&#xA;1. &amp;nbsp;isolate a block of code to be reused inside the class.&#xA;2. &amp;nbsp;extract code from another method for code readability.&#xA;Now, taking these two use cases in mind, here&#39;s an easy conclusion:</description>
    </item>
    <item>
      <title>Know Your Enemies Before They Kill You!</title>
      <link>http://smsohan.com/blog/2010/07/19/know-your-enemies-before-they-kill-you/</link>
      <pubDate>Mon, 19 Jul 2010 00:00:00 +0000</pubDate>
      <guid>http://smsohan.com/blog/2010/07/19/know-your-enemies-before-they-kill-you/</guid>
      <description>From darekbYou know what, this is a political world. So, enemies will seemingly look like your friends until the moment when.. well, its time for the kill! My dear readers, its time to know the enemies!&#xA;I have met with a few enemies off late. I will go one by one here.&#xA;If you are a software developer like me, you will often see this enemy, camouflaged variables, methods, classes and namespaces.</description>
    </item>
    <item>
      <title>Unit/Functional Test Rails ActionController filters following DRY</title>
      <link>http://smsohan.com/blog/2009/05/13/unit-test-actioncontroller-filters/</link>
      <pubDate>Wed, 13 May 2009 00:00:00 +0000</pubDate>
      <guid>http://smsohan.com/blog/2009/05/13/unit-test-actioncontroller-filters/</guid>
      <description>At ScrumPad most of our controllers are bounded by filters for authentication/authorization. Some filters apply to all actions in a controller while others apply to only a few or leave out only a few. However, since we are following TDD, we need to test the filter is invoked before each of the desired action. This makes the test code MOIST (not DRY)!&#xA;Example of Moist Code:&#xA;The following example only captures two test methods.</description>
    </item>
    <item>
      <title>Forget Me Not! Object Oriented Design in Custom Exception</title>
      <link>http://smsohan.com/blog/2009/04/26/object-oriented-design-in-custom/</link>
      <pubDate>Sun, 26 Apr 2009 00:00:00 +0000</pubDate>
      <guid>http://smsohan.com/blog/2009/04/26/object-oriented-design-in-custom/</guid>
      <description>When designing custom exceptions, you may forget about old school OO fundamentals. As a reminder, lets take a look into the following custom exception classes.&#xA;StorySaveError&#xA;StoryDescopeNotAllowedError&#xA;StoryCompleteError&#xA;StoryNotFoundError&#xA;StoryDeleteError&#xA;StoryDeleteNotAllowedErrorThese exceptions are really useful in my application. But the bad thing is, they all derive from StandardError class, whereas there should be a base class, may be StoryError, which is more meaningful and useful. So, we can have the following-</description>
    </item>
    <item>
      <title>Implementing Template Method in Rails Controllers Using Module and Mixin</title>
      <link>http://smsohan.com/blog/2009/04/15/implementing-template-method-in-rails/</link>
      <pubDate>Wed, 15 Apr 2009 00:00:00 +0000</pubDate>
      <guid>http://smsohan.com/blog/2009/04/15/implementing-template-method-in-rails/</guid>
      <description>All rails controllers are subclasses of the ApplicationController class. A typical controller class declaration will look like the following-&#xA;class LoginController &amp;lt; ApplicationController&#xA;#the actions go here&#xA;endWith this basic information, I would like to state the problem first.&#xA;The Problem/Job in Hand&#xA;Add an action switch_project to all the controllers (&amp;gt; 20) of the ScrumPad code base. The implementations of the switch_project method will be same for all the controllers only other than the fact that, the switching destination will be different.</description>
    </item>
    <item>
      <title>Unit Testing using Mocks - FillWithMocks, Fill all or only selected properties with Mocks using only a single method call</title>
      <link>http://smsohan.com/blog/2008/08/13/unit-testing-using-mocks-fillwithmocks/</link>
      <pubDate>Wed, 13 Aug 2008 00:00:00 +0000</pubDate>
      <guid>http://smsohan.com/blog/2008/08/13/unit-testing-using-mocks-fillwithmocks/</guid>
      <description>I have been doing TDD for about two years now and using mock testing for interaction based unit testing in my projects. What I have learned over this time is, a unit testable design leads to introduction of interfaces and dependency injection for testing a code in isolation. And when I want to perform tests on my interactions, I need to create mock objects and inject these mock instances to my object under test.</description>
    </item>
    <item>
      <title>Ninject - Dependency Injection Framework for .Net Objects</title>
      <link>http://smsohan.com/blog/2008/08/03/ninject-dependency-injection-framework/</link>
      <pubDate>Sun, 03 Aug 2008 00:00:00 +0000</pubDate>
      <guid>http://smsohan.com/blog/2008/08/03/ninject-dependency-injection-framework/</guid>
      <description>I loved Ninject because&#xA;- I don&#39;t love to write/edit XML documents myself.&#xA;- I think Ninject can save a lot of coding and debugging time.&#xA;- This is a cool framework :-) with a fun-to-read documentation.&#xA;- It uses simple conventions and Attributes for resolving most dependencies behind the scene.&#xA;- You can take full advantage to lambda expressions for writing compact codes.&#xA;Today, I took a look into this Ninject framework.</description>
    </item>
    <item>
      <title>Verify Correct DateTime data in method call using NMock</title>
      <link>http://smsohan.com/blog/2008/03/18/verify-correct-datetime-data-in-method/</link>
      <pubDate>Tue, 18 Mar 2008 00:00:00 +0000</pubDate>
      <guid>http://smsohan.com/blog/2008/03/18/verify-correct-datetime-data-in-method/</guid>
      <description>Recently I was writing unit test for a method of the following signature&#xA;interface ICache&#xA;{&#xA;void Insert(string key, object value, DateTime absoluteExpiration, TimeSpan slidingExpiration);&#xA;}&#xA;and I wanted to verify the following call -&#xA;Insert(&#34;key&#34;, &#34;value&#34;, DateTime.Now.AddMinutes(30), TimeSpan.Zero);&#xA;However, you readily see the problem in verifying with the above call for the presence of DateTime.Now.AddMinutes(30) in the argument. So, a test method like the following won&#39;t work for obvious reason.</description>
    </item>
    <item>
      <title>Mock Internal Interface with NMock2 - Use InternalsVisibleToAttribute</title>
      <link>http://smsohan.com/blog/2008/03/16/mock-internal-interface-with-nmock2-use/</link>
      <pubDate>Sun, 16 Mar 2008 00:00:00 +0000</pubDate>
      <guid>http://smsohan.com/blog/2008/03/16/mock-internal-interface-with-nmock2-use/</guid>
      <description>Yesterday I badly needed to create mocks for my internal interfaces. I am using NMock2 as a Mocking framework and found it really difficult to produce Mocks for internal interfaces. After some &#39;google time&#39; and investigation I found that you need the following two lines in your AssemblyInfo.cs to achieve this purpose-&#xA;[assembly: InternalsVisibleTo(&#34;Mocks&#34;)]&#xA;[assembly: InternalsVisibleTo(&#34;MockObjects&#34;)]&#xA;Where are the two assemblies? I found that these two assemblies are dynamically created by NMock2 for mocking your interfaces.</description>
    </item>
    <item>
      <title>Unity - A Dependency Injection framework from Microsoft Patterns and Practices</title>
      <link>http://smsohan.com/blog/2008/03/15/unity-dependency-injection-framework/</link>
      <pubDate>Sat, 15 Mar 2008 00:00:00 +0000</pubDate>
      <guid>http://smsohan.com/blog/2008/03/15/unity-dependency-injection-framework/</guid>
      <description>I have been using Spring.Net for implementing Dependency Injection in my .Net projects. Spring is already one of the most known providers of DI in the Java world and a port to .Net actually eased the lives of people like me who are willing to develop unit-testable software.&#xA;However, with all the happiness enjoyed through Spring.Net, I guess its time to take a look into Unity. I have only started using this and I found it interesting in the sense that its more of .</description>
    </item>
    <item>
      <title>Unit Testing void Methods - Part 1</title>
      <link>http://smsohan.com/blog/2007/12/02/unit-testing-void-methods-part-1/</link>
      <pubDate>Sun, 02 Dec 2007 00:00:00 +0000</pubDate>
      <guid>http://smsohan.com/blog/2007/12/02/unit-testing-void-methods-part-1/</guid>
      <description>Dissection of void Methods without parameters&#xA;Methods with void return types incur complexities in writing unit tests. So, we need to characterize the void methods to make sure we have guards against the odds for testability.&#xA;A typical void method without any parameter looks like the following&#xA;public void DoSomething()&#xA;{&#xA;//1.modifies some member variables&#xA;this.someMemberVariable = 10;&#xA;//2.Calls methods of the same class or other classes&#xA;someClass.SomeOtherMethod(someArg);&#xA;//3.Sometimes throws exception</description>
    </item>
  </channel>
</rss>
