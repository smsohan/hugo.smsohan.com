<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Architecture on Sohan's Blog</title><link>http://smsohan.com/categories/software-architecture/</link><description>Recent content in Software Architecture on Sohan's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://smsohan.com/categories/software-architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>UI SDK Design Principles</title><link>http://smsohan.com/blog/2021/10/12/ui-sdk-design-principles/</link><pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate><guid>http://smsohan.com/blog/2021/10/12/ui-sdk-design-principles/</guid><description>At Microsoft, I’ve been working with my team on a multi-platform UI SDK for Azure Communication Services. We empower developers to build visually delightful communication experiences (chat, audio-video calling, etc.) for everyone. I’ve participated in numerous design discussions on this UI SDK and I realized many of the things I learned here apply to the domain of UI SDKs beyond just the one we are creating. So, this blog post is an attempt to make a list of design principles that developers of UI SDKs can follow to create a bigger impact out of their work.</description></item><item><title>Software Architecture - Topic 6 - Slack and Microsoft Teams</title><link>http://smsohan.com/blog/2021/06/18/architecture-realtime/</link><pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate><guid>http://smsohan.com/blog/2021/06/18/architecture-realtime/</guid><description>Most applications have a request-response based single-channel data-flow. In such systems, human or software triggered requests are served by software provided responses. For example, when you make your DuckDuckGo search, you initiate a request and their server produces a response back to you. Realtime multiplayer systems are quite different because the pattern of information flow is more complex, often being a two-way or many-to-many data flow, with strict latency constraints. For example, when you chat with a bunch of friends, or join them for a video call, the data-flow is quite different than when you watch a YouTube video.</description></item><item><title>Software Architecture - Topic 5 - MongoDB</title><link>http://smsohan.com/blog/2021/04/23/architecture-mongodb/</link><pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate><guid>http://smsohan.com/blog/2021/04/23/architecture-mongodb/</guid><description>Continuing on this architecture series of posts. Similar to the post on Redis, this time let&amp;rsquo;s focus on another hugely popular distributed database called MongoDB. If you aren&amp;rsquo;t familiar with MongoDB, it&amp;rsquo;s a distributed database that allows you to store and query humongous amounts of JSON-like data.
To get an overview of MongoDB and its architecture, you can watch the following YouTube video:
Of course, you can also download the official architecture guide to learn more.</description></item><item><title>Software Architecture - Topic 4 - Redis</title><link>http://smsohan.com/blog/2021/03/04/architecture-redis/</link><pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate><guid>http://smsohan.com/blog/2021/03/04/architecture-redis/</guid><description>Welcome back to the Software Architecture series. I know at least a few people from my team are following, and that&amp;rsquo;s a great encouragement.
For today&amp;rsquo;s post, let&amp;rsquo;s focus on learning from a very popular and commonly used open-source project called Redis. To the developers, Redis is a dead simple key-value store with a super simple API as follows:
$ set today &amp;#39;Thursday&amp;#39; OK $ get today Thursday $ set temp 20 OK $ incr temp 21 $ incrby temp 3 24 $ get temp 24 Of course Redis has more advanced features, but not too many.</description></item><item><title>Software Architecture - Topic 3: Writing</title><link>http://smsohan.com/blog/2021/01/17/software-architecture-part-3-writing/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>http://smsohan.com/blog/2021/01/17/software-architecture-part-3-writing/</guid><description>An architect first needs to write for herself, and then for her team. Let me explain a bit.
An architect takes the trio of requirements, people, and environment, and does her research to design the most delightful system. In her research process, she uses her past experience as well as the experience of others. Even a moderately complex system design involves a lot of trade-offs without clear winners. For example, given that there are tens of different databases one can choose, how can she recommend a specific one?</description></item><item><title>Software Architecture - Topic 2: People</title><link>http://smsohan.com/blog/2020/12/30/software-architecture-part-2-people/</link><pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate><guid>http://smsohan.com/blog/2020/12/30/software-architecture-part-2-people/</guid><description>To be an architect, you&amp;rsquo;ll have to be a leader. And, to be a leader, you&amp;rsquo;ll have to be able to understand people and create an influence on them. So, focusing on the people involved with a system is a pre-requisite for designing systems that delight them.
Photo credits to Alan O&amp;rsquo;Rourke
For this topic, I want you to read and internalize the ideas from the book How to Win Friends and Influence People by Dale Carnegie.</description></item><item><title>Software Architecture - Topic 1: Delightfulness</title><link>http://smsohan.com/blog/2020/12/26/software-artchitecture-part-1/</link><pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate><guid>http://smsohan.com/blog/2020/12/26/software-artchitecture-part-1/</guid><description>&amp;ldquo;I want to be an architect&amp;rdquo; - is a common career goal I hear during one:one meetings and annual reviews with my team members. Honestly, I&amp;rsquo;m writing this series of blog posts to bring some clarity and structure into my own thoughts, and hopefully to scale my time. You can even say, I&amp;rsquo;m open-sourcing my mentorship on the topic of software archtecture. My sincere hope is, this series helps my team or anyone who wants to systematically learn and improve their software design skills.</description></item></channel></rss>