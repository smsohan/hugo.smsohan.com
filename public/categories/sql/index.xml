<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SQL on Sohan's Blog</title><link>http://smsohan.com/categories/sql/</link><description>Recent content in SQL on Sohan's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 06 Mar 2009 00:00:00 +0000</lastBuildDate><atom:link href="http://smsohan.com/categories/sql/index.xml" rel="self" type="application/rss+xml"/><item><title>The RANK() Function for Numbering on Groups/Partitions in SQL Server</title><link>http://smsohan.com/blog/2009/03/06/rank-function-for-numbering-on/</link><pubDate>Fri, 06 Mar 2009 00:00:00 +0000</pubDate><guid>http://smsohan.com/blog/2009/03/06/rank-function-for-numbering-on/</guid><description>Previously, I used the ROW_NUMBER() function to get the monotonically increasing row number of a result set from a SQL query. But, this time the requirement was a bit different as follows.
I have many combinations of Year, Make, Model and Trim of vehicles in my database. I also have potential profit on sale of each of the combinations. I need to produce, the top 5 trims for a Year, Make, Model combination that yields maximum profits.</description></item><item><title>Comparing with NULL in where clause using Linq to SQL</title><link>http://smsohan.com/blog/2008/08/05/comparing-with-null-in-where-clause-in/</link><pubDate>Tue, 05 Aug 2008 00:00:00 +0000</pubDate><guid>http://smsohan.com/blog/2008/08/05/comparing-with-null-in-where-clause-in/</guid><description>In SQL Server, a SQL statement like 'NULL=NULL' evaluates to false. however 'NULL IS NULL' evaluates to true. So, for NULL values in your database columns, you need to use the 'IS' operator instead of the regular '=' operator.
The problem is, in Linq to SQL, there is no such 'IS' operator since 'IS' is already used as a C# language keyword. So, when you are invoking an equality check in your Linq to SQL where clause to a nullable column you need to be alert on this behavior.</description></item><item><title>How To Set Default Application Wide CommandTimeout in LINQ to SQL DataContext Subclasses</title><link>http://smsohan.com/blog/2008/04/29/how-to-set-default-application-wide/</link><pubDate>Tue, 29 Apr 2008 00:00:00 +0000</pubDate><guid>http://smsohan.com/blog/2008/04/29/how-to-set-default-application-wide/</guid><description>Sometimes you have written long running stored procedures and you need to invoke the stored procedures through your LINQ to SQL class. By default the SqlCommand has a timeout value of 30 seconds and in some instances you may need a longer value to complete your long running database operations. In a situation like this, if you are using the default time out value, you may encounter the following exception scenario,</description></item><item><title>Posts of the day that I liked most</title><link>http://smsohan.com/blog/2008/04/08/posts-of-day-that-i-liked-most/</link><pubDate>Tue, 08 Apr 2008 00:00:00 +0000</pubDate><guid>http://smsohan.com/blog/2008/04/08/posts-of-day-that-i-liked-most/</guid><description>1. The Monostate Pattern - Another way to look into Singleton and some improvement over singleton issues.
Read it Here
2. Another good article on LINQ regarding the grouping queries. Read it Here</description></item></channel></rss>